-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PSwiki.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import PSwiki.InputObject
import PSwiki.Interface
import PSwiki.Object
import PSwiki.Scalar
import PSwiki.ScalarCodecs
import PSwiki.Union


type alias SubstancesOptionalArguments =
    { effect : OptionalArgument String
    , query : OptionalArgument String
    , chemicalClass : OptionalArgument String
    , psychoactiveClass : OptionalArgument String
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    }


{-|

  - effect - Name of the effect you want the substances of
  - query - Name of the substance you are looking for
  - chemicalClass - Chemical class of the substances you are looking for (i.e. tryptamine)
  - psychoactiveClass - Psychoactive class of the substances you are looking for (i.e. nootropic)

-}
substances :
    (SubstancesOptionalArguments -> SubstancesOptionalArguments)
    -> SelectionSet decodesTo PSwiki.Object.Substance
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
substances fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { effect = Absent, query = Absent, chemicalClass = Absent, psychoactiveClass = Absent, limit = Absent, offset = Absent }

        optionalArgs____ =
            [ Argument.optional "effect" filledInOptionals____.effect Encode.string, Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "chemicalClass" filledInOptionals____.chemicalClass Encode.string, Argument.optional "psychoactiveClass" filledInOptionals____.psychoactiveClass Encode.string, Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "substances" optionalArgs____ object____ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias EffectsOptionalArguments =
    { effect : OptionalArgument String
    , substance : OptionalArgument String
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    }


{-|

  - effect - Name of the effect you are looking for
  - substance - Name of the substance you want the effects of

-}
effects :
    (EffectsOptionalArguments -> EffectsOptionalArguments)
    -> SelectionSet decodesTo PSwiki.Object.Substance
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
effects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { effect = Absent, substance = Absent, limit = Absent, offset = Absent }

        optionalArgs____ =
            [ Argument.optional "effect" filledInOptionals____.effect Encode.string, Argument.optional "substance" filledInOptionals____.substance Encode.string, Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "effects" optionalArgs____ object____ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias SubstancesByEffectOptionalArguments =
    { effect : OptionalArgument (List (Maybe String))
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    }


{-|

  - effect - Name of the effect you are looking for

-}
substances_by_effect :
    (SubstancesByEffectOptionalArguments -> SubstancesByEffectOptionalArguments)
    -> SelectionSet decodesTo PSwiki.Object.Substance
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
substances_by_effect fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { effect = Absent, limit = Absent, offset = Absent }

        optionalArgs____ =
            [ Argument.optional "effect" filledInOptionals____.effect (Encode.string |> Encode.maybe |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "substances_by_effect" optionalArgs____ object____ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias EffectsBySubstanceOptionalArguments =
    { substance : OptionalArgument String
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    }


{-|

  - substance - Name of the substance you want the effects of

-}
effects_by_substance :
    (EffectsBySubstanceOptionalArguments -> EffectsBySubstanceOptionalArguments)
    -> SelectionSet decodesTo PSwiki.Object.Effect
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
effects_by_substance fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { substance = Absent, limit = Absent, offset = Absent }

        optionalArgs____ =
            [ Argument.optional "substance" filledInOptionals____.substance Encode.string, Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "effects_by_substance" optionalArgs____ object____ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ExperiencesOptionalArguments =
    { substances_by_effect : OptionalArgument String
    , effects_by_substance : OptionalArgument String
    , substance : OptionalArgument String
    }


experiences :
    (ExperiencesOptionalArguments -> ExperiencesOptionalArguments)
    -> SelectionSet decodesTo PSwiki.Object.Experience
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
experiences fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { substances_by_effect = Absent, effects_by_substance = Absent, substance = Absent }

        optionalArgs____ =
            [ Argument.optional "substances_by_effect" filledInOptionals____.substances_by_effect Encode.string, Argument.optional "effects_by_substance" filledInOptionals____.effects_by_substance Encode.string, Argument.optional "substance" filledInOptionals____.substance Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "experiences" optionalArgs____ object____ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)
