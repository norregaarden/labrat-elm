-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PSwiki.Interface.RoaRange exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import PSwiki.InputObject
import PSwiki.Interface
import PSwiki.Object
import PSwiki.Scalar
import PSwiki.ScalarCodecs
import PSwiki.Union


type alias Fragments decodesTo =
    { onSubstanceRoaRange : SelectionSet decodesTo PSwiki.Object.SubstanceRoaRange
    , onSubstanceRoaDurationRange : SelectionSet decodesTo PSwiki.Object.SubstanceRoaDurationRange
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo PSwiki.Interface.RoaRange
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "SubstanceRoaRange" selections____.onSubstanceRoaRange
        , Object.buildFragment "SubstanceRoaDurationRange" selections____.onSubstanceRoaDurationRange
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onSubstanceRoaRange = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onSubstanceRoaDurationRange = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


min : SelectionSet (Maybe Float) PSwiki.Interface.RoaRange
min =
    Object.selectionForField "(Maybe Float)" "min" [] (Decode.float |> Decode.nullable)


max : SelectionSet (Maybe Float) PSwiki.Interface.RoaRange
max =
    Object.selectionForField "(Maybe Float)" "max" [] (Decode.float |> Decode.nullable)
